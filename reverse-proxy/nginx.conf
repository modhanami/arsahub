events {}

http {
    client_max_body_size 2M;

    upstream backend {
        server backend:8080;
    }

    upstream backend-socketio {
        server backend:9097;
    }

    upstream frontend {
        server frontend:3000;
    }

    server {
        listen 80;

        return 302 https://$host$request_uri;
    }

    server {
        listen 443 ssl;

        ssl_certificate ssl/cp23or1.crt;
        ssl_certificate_key ssl/cp23or1.key;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
        # Specify the password as a format supported by openssl
        ssl_protocols SSLv2 SSLv3 TLSv1.2;
        ssl_ciphers HIGH:!aNULL:!MD5; # Password encryption method
        ssl_prefer_server_ciphers on; # Server passwords that rely on SSLv3 and TLSv1 protocols will take precedence over client passwords

        location /api {
            proxy_pass http://backend;
        }

        location /socket.io {
            proxy_pass http://backend-socketio;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_redirect off;
            proxy_ssl_server_name on;
            proxy_ssl_name $host;
        }

        location ~* ^/swagger-ui {
            proxy_pass http://backend;
        }

        location ~* ^/v3/api-docs {
            proxy_pass http://backend;
        }

        location / {
            proxy_pass http://frontend;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
        }
    }
}
